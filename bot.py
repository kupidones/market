import requests
import time
import json

BOT_TOKEN = "8227290006:AAHhQCs1KIrRiggUhNJ9hpWE-IVUH7OdLAU"
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API Telegram"""
    payload = {
        'chat_id': chat_id,
        'text': text
    }
    
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)
    
    try:
        response = requests.post(f"{BASE_URL}/sendMessage", json=payload, timeout=10)
        return response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def get_updates(offset=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    params = {'timeout': 30}
    if offset:
        params['offset'] = offset
    
    try:
        response = requests.get(f"{BASE_URL}/getUpdates", params=params, timeout=35)
        return response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return {'ok': False, 'result': []}

def create_inline_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å Web App –∫–Ω–æ–ø–∫–æ–π"""
    return {
        'inline_keyboard': [[{
            'text': '–û–¢–ö–†–´–¢–¨',
            'web_app': {'url': 'https://kupidones.github.io/market/'}
        }]]
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    print("=" * 50)
    print("üõçÔ∏è Market Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start")
    print("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://kupidones.github.io/market/")
    print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)
    
    last_update_id = 0
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = get_updates(last_update_id + 1)
            
            if updates.get('ok'):
                for update in updates['result']:
                    update_id = update['update_id']
                    
                    if 'message' in update and 'text' in update['message']:
                        message = update['message']
                        chat_id = message['chat']['id']
                        text = message['text']
                        user_name = message['chat'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                        
                        if text == '/start':
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ò–ù–õ–ê–ô–ù-–∫–Ω–æ–ø–∫–æ–π
                            keyboard = create_inline_keyboard()
                            result = send_message(
                                chat_id,
                                f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üõçÔ∏è\n\n"
                                "2\n"
                                "4:",
                                keyboard
                            )
                            
                            if result and result.get('ok'):
                                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: {chat_id})")
                            else:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
                    
                    last_update_id = max(last_update_id, update_id)
            
            time.sleep(1)
            
        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            time.sleep(5)

if __name__ == "__main__":
    main()